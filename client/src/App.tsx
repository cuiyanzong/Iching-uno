import React, { useEffect, useState, startTransition } from "react";
import { Switch, Route } from "wouter";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Sword, Fan } from "lucide-react";
import LocalGame from "@/pages/LocalGame";
import TutorialModal from "@/components/TutorialModal";
import type { BattleStyle } from "@shared/schema";

import Leaderboard from "@/components/Leaderboard";
import NotFound from "@/pages/not-found";
import { testScoreCalculation } from "@/utils/scoreTest";
import { clearAllPermanentScores } from "@/utils/clearScores";
import { resetScoreSystem } from "@/utils/resetScores";
import { forceResetAllScores, verifyScoreReset } from "@/utils/forceResetScores";
import { resetAIScores, isPlayerNameExists, getPlayerScoreByName, getPermanentScores, initializePlayerScore } from "@/utils/permanentScores";
import { getDeviceId } from "@/utils/deviceId";
import { checkPendingUploadsOnStartup, setupNetworkListener, getUploadQueueStatus } from "@/utils/autoUpload";
import "@/utils/performanceTest";

function HomePage() {
  const [showLocalGame, setShowLocalGame] = useState(false);
  const [showTutorial, setShowTutorial] = useState(false);
  const [showNameInput, setShowNameInput] = useState(false);
  const [showLeaderboard, setShowLeaderboard] = useState(false);
  const [playerName, setPlayerName] = useState('');
  const [showNameConfirm, setShowNameConfirm] = useState(false);
  const [existingPlayerData, setExistingPlayerData] = useState<any>(null);
  const [isChecking, setIsChecking] = useState(false);
  const [showWelcomeMessage, setShowWelcomeMessage] = useState(false);
  const [welcomePlayerName, setWelcomePlayerName] = useState('');
  const [showBattleStyleSelect, setShowBattleStyleSelect] = useState(false);
  const [selectedBattleStyle, setSelectedBattleStyle] = useState<BattleStyle | null>(null);

  // ÂºÄÂèëÊ®°Âºè‰∏ãÊ∑ªÂä†ÊµãËØïÂäüËÉΩ
  useEffect(() => {
    if (typeof window !== 'undefined') {
      (window as any).testScoreCalculation = testScoreCalculation;
      (window as any).clearAllPermanentScores = clearAllPermanentScores;
      (window as any).resetScoreSystem = resetScoreSystem;
      (window as any).forceResetAllScores = forceResetAllScores;
      (window as any).verifyScoreReset = verifyScoreReset;
      (window as any).getUploadQueueStatus = getUploadQueueStatus;
      
      // Èü≥È¢ëË∞ÉËØïÂ∑•ÂÖ∑
      import('@/lib/localAudio').then(({ audioManager }) => {
        (window as any).checkAudioStatus = () => {
          console.log('üîä Èü≥È¢ëÁ≥ªÁªüÁä∂ÊÄÅÊ£ÄÊü•:');
          console.log('  - ÂêØÁî®Áä∂ÊÄÅ:', audioManager.isEnabled());
          console.log('  - ÂΩìÂâçËØ≠Èü≥:', audioManager.getVoice());
          console.log('  - Èü≥Èáè:', audioManager.getVolume());
          console.log('  - localStorageËÆæÁΩÆ:', localStorage.getItem('audio-settings'));
        };
        
        (window as any).testAudioPlay = (cardId = 'fire_fire_li') => {
          console.log(`üîä ÊµãËØïÊí≠ÊîæÂç°ÁâåÈü≥È¢ë: ${cardId}`);
          audioManager.playAudio(cardId);
        };
        
        (window as any).forceEnableAudio = () => {
          console.log('üîä Âº∫Âà∂ÂêØÁî®Èü≥È¢ëÁ≥ªÁªü');
          audioManager.setEnabled(true);
          audioManager.setVolume(0.8);
          console.log('‚úÖ Èü≥È¢ëÁ≥ªÁªüÂ∑≤ÂêØÁî®');
        };
      });
      
      console.log('üß™ ÁßØÂàÜÊµãËØïÂäüËÉΩÂ∑≤Âä†ËΩΩ:');
      console.log('  - testScoreCalculation() ÊµãËØïÁßØÂàÜËÆ°ÁÆó');
      console.log('  - clearAllPermanentScores() Ê∏ÖÁêÜÊâÄÊúâÁßØÂàÜÊï∞ÊçÆ');
      console.log('  - resetScoreSystem() ÈáçÁΩÆÁßØÂàÜÁ≥ªÁªüÂπ∂Âà∑Êñ∞È°µÈù¢');
      console.log('  - forceResetAllScores() Âº∫Âà∂ÈáçÁΩÆÊâÄÊúâÁßØÂàÜ');
      console.log('  - verifyScoreReset() È™åËØÅÁßØÂàÜÈáçÁΩÆÁä∂ÊÄÅ');
      console.log('  - getUploadQueueStatus() Êü•Áúã‰∏ä‰º†ÈòüÂàóÁä∂ÊÄÅ');
      console.log('üîä Èü≥È¢ëË∞ÉËØïÂäüËÉΩÂ∑≤Âä†ËΩΩ:');
      console.log('  - checkAudioStatus() Ê£ÄÊü•Èü≥È¢ëÁ≥ªÁªüÁä∂ÊÄÅ');
      console.log('  - testAudioPlay() ÊµãËØïÈü≥È¢ëÊí≠Êîæ');
      console.log('  - forceEnableAudio() Âº∫Âà∂ÂêØÁî®Èü≥È¢ë');
    }
  }, []);

  // ÂêØÂä®Êó∂Ê£ÄÊü•ÂæÖ‰∏ä‰º†Êï∞ÊçÆÂíåËÆæÁΩÆÁΩëÁªúÁõëÂê¨
  useEffect(() => {
    // Ê£ÄÊü•ÂæÖ‰∏ä‰º†Êï∞ÊçÆ
    checkPendingUploadsOnStartup();
    
    // ËÆæÁΩÆÁΩëÁªúÁä∂ÊÄÅÁõëÂê¨
    const cleanupNetworkListener = setupNetworkListener();
    
    return cleanupNetworkListener;
  }, []);

  const startLocalGame = () => {
    startTransition(() => {
      setShowNameInput(true);
    });
  };

  // Ê∑ªÂä†Ë∞ÉËØïÂäüËÉΩ
  useEffect(() => {
    if (typeof window !== 'undefined') {
      (window as any).checkLocalStorage = () => {
        console.log('üîç Êú¨Âú∞Â≠òÂÇ®Ê£ÄÊü•:');
        console.log('localStorage keys:', Object.keys(localStorage));
        console.log('permanent scores:', localStorage.getItem('hexagram_uno_permanent_scores'));
        const scores = getPermanentScores();
        console.log('getPermanentScores():', scores);
        console.log('isPlayerNameExists("ÁúüÂ¥î"):', isPlayerNameExists('ÁúüÂ¥î'));
        console.log('getPlayerScoreByName("ÁúüÂ¥î"):', getPlayerScoreByName('ÁúüÂ¥î'));
      };
      
      // ÂàõÂª∫ÊµãËØïÊï∞ÊçÆÂäüËÉΩ
      (window as any).createTestData = () => {
        console.log('üîß ÂàõÂª∫ÊµãËØïÊï∞ÊçÆ...');
        const testScores = {
          'human_ÁúüÂ¥î': {
            playerId: 'human_ÁúüÂ¥î',
            playerName: 'ÁúüÂ¥î',
            totalScore: 300,
            gamesPlayed: 5,
            wins: 3,
            defeats: 2,
            clearCards: 8,
            achievements: {
              smallWins: 2,
              doubleKills: 1,
              quadKills: 0
            },
            scoreHistory: [
              {
                timestamp: Date.now() - 86400000,
                oldScore: 200,
                newScore: 300,
                change: 100,
                reason: 'Â∞èËÉú‰∏ÄÂ±Ä',
                gameId: 'game_123'
              }
            ],
            lastPlayed: Date.now() - 86400000
          }
        };
        localStorage.setItem('hexagram_uno_permanent_scores', JSON.stringify(testScores));
        console.log('‚úÖ ÊµãËØïÊï∞ÊçÆÂ∑≤ÂàõÂª∫');
      };
      
      console.log('üîç Ë∞ÉËØïÂ∑•ÂÖ∑Â∑≤Âä†ËΩΩ: checkLocalStorage()');
      console.log('üîß ÊµãËØïÂ∑•ÂÖ∑Â∑≤Âä†ËΩΩ: createTestData()');
    }
  }, []);

  // Ê£ÄÊü•Áé©ÂÆ∂ÂêçÁß∞ÊòØÂê¶Â∑≤Â≠òÂú®ÔºàÊú¨Âú∞Ê£ÄÊü•Ôºâ
  const checkPlayerNameExists = async (name: string) => {
    try {
      // ‰ΩøÁî®Êú¨Âú∞ÁßØÂàÜËÆ∞ÂΩïÊ£ÄÊü•Ôºå‰∏çÂÜç‰æùËµñÂÖ®ÁêÉÊéíË°åÊ¶ú
      console.log(`üîç ÂºÄÂßãÊ£ÄÊü•Áé©ÂÆ∂Âêç: "${name}"`);
      
      // Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®ÁöÑÊâÄÊúâÁßØÂàÜÊï∞ÊçÆ
      const allScores = getPermanentScores();
      console.log(`üîç ÊâÄÊúâÊú¨Âú∞ÁßØÂàÜÊï∞ÊçÆ:`, allScores);
      console.log(`üîç ÊâÄÊúâÈîÆÂêç:`, Object.keys(allScores));
      
      const exists = isPlayerNameExists(name);
      console.log(`üîç isPlayerNameExists ËøîÂõû: ${exists}`);
      
      if (exists) {
        const playerData = getPlayerScoreByName(name);
        console.log(`üîç getPlayerScoreByName ËøîÂõû:`, playerData);
        return playerData;
      }
      console.log(`üîç Áé©ÂÆ∂Âêç"${name}"‰∏çÂ≠òÂú®ÔºåËøîÂõûnull`);
      return null;
    } catch (error) {
      console.error('üîç Ê£ÄÊü•Áé©ÂÆ∂ÂêçÁß∞Â§±Ë¥•:', error);
      console.log(`üîç ÈîôËØØËØ¶ÊÉÖ:`, error);
      return null;
    }
  };

  const handleNameSubmit = async (name: string) => {
    if (!name.trim()) {
      return;
    }
    
    setIsChecking(true);
    const existingPlayer = await checkPlayerNameExists(name.trim());
    setIsChecking(false);
    
    console.log(`üîç Êü•ÈáçÁªìÊûú: Áé©ÂÆ∂Âêç"${name.trim()}"`, existingPlayer ? 'Â∑≤Â≠òÂú®' : '‰∏çÂ≠òÂú®');
    console.log('üîç Áé∞ÊúâÁé©ÂÆ∂Êï∞ÊçÆ:', existingPlayer);
    
    if (existingPlayer) {
      setPlayerName(name.trim());
      setExistingPlayerData(existingPlayer);
      setShowNameConfirm(true);
    } else {
      // ÂêçÁß∞‰∏çÂ≠òÂú®ÔºåÊòæÁ§∫Ê∏©È¶®ÊèêÁ§∫
      setWelcomePlayerName(name.trim());
      setShowWelcomeMessage(true);
    }
  };

  const handleNameConfirmOverwrite = () => {
    setPlayerName(existingPlayerData?.playerName || '');
    setShowNameConfirm(false);
    setShowNameInput(false);
    // ÊòæÁ§∫ÊàòÊñóÈ£éÊ†ºÈÄâÊã©
    setShowBattleStyleSelect(true);
  };

  const handleNameCancel = () => {
    setShowNameInput(false);
  };

  const handleWelcomeConfirm = () => {
    setPlayerName(welcomePlayerName);
    setShowWelcomeMessage(false);
    setShowNameInput(false);
    // ÊòæÁ§∫ÊàòÊñóÈ£éÊ†ºÈÄâÊã©
    setShowBattleStyleSelect(true);
  };

  const handleWelcomeReInput = () => {
    setShowWelcomeMessage(false);
    setWelcomePlayerName('');
    setShowNameInput(true);
  };

  const handleBattleStyleSelect = (style: BattleStyle) => {
    setSelectedBattleStyle(style);
    setShowBattleStyleSelect(false);
    // ÈáçÁΩÆAIÁßØÂàÜ
    resetAIScores();
    startTransition(() => {
      setShowLocalGame(true);
    });
  };



  const backToHome = () => {
    startTransition(() => {
      setShowLocalGame(false);
      setPlayerName('');
      setSelectedBattleStyle(null);
    });
  };

  if (showLocalGame) {
    return <LocalGame playerName={playerName} battleStyle={selectedBattleStyle} onBackToHome={backToHome} />;
  }

  return (
    <div className="min-h-screen flex items-center justify-center hexagram-bg">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-white mb-8">ÂÖ≠ÂçÅÂõõÂç¶ UNO</h1>
        <p className="text-gray-300 mb-8">‰∏≠ÂõΩ‰º†ÁªüÊñáÂåñ‰∏éÁé∞‰ª£Âç°ÁâåÊ∏∏ÊàèÁöÑÂÆåÁæéÁªìÂêà</p>
        
        <div className="space-y-4 max-w-sm mx-auto">
          <button
            onClick={startLocalGame}
            className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded"
          >
            ÂºÄÂßãÊ∏∏Êàè
          </button>
          
          <button
            onClick={() => startTransition(() => setShowLeaderboard(true))}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded"
          >
            ÁßØÂàÜÊéíË°åÊ¶ú
          </button>
          
          <button
            onClick={() => startTransition(() => setShowTutorial(true))}
            className="w-full border border-white/20 text-white py-2 px-4 rounded hover:bg-white/10"
          >
            Ê∏∏ÊàèÊïôÁ®ã
          </button>
        </div>
      </div>
      
      {showNameInput && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4">
            <h2 className="text-xl font-bold text-white mb-4">ËæìÂÖ•Áé©ÂÆ∂ÂêçÁß∞</h2>
            <input
              type="text"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
              placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÂêçÁß∞"
              className="w-full p-2 mb-4 bg-gray-700 text-white rounded"
              autoFocus
            />
            <div className="flex gap-2">
              <button
                onClick={() => handleNameSubmit(playerName)}
                disabled={!playerName.trim() || isChecking}
                className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white py-2 px-4 rounded"
              >
                {isChecking ? (
                  <div className="flex items-center justify-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>Ê£ÄÊü•‰∏≠...</span>
                  </div>
                ) : (
                  "ÂºÄÂßãÊ∏∏Êàè"
                )}
              </button>
              <button
                onClick={handleNameCancel}
                className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded"
              >
                ÂèñÊ∂à
              </button>
            </div>
          </div>
        </div>
      )}
      
      {showLeaderboard && (
        <Leaderboard
          onClose={() => startTransition(() => setShowLeaderboard(false))}
        />
      )}
      
      {showTutorial && (
        <TutorialModal 
          isOpen={showTutorial}
          onClose={() => startTransition(() => setShowTutorial(false))}
          onStartTutorial={() => startTransition(() => setShowTutorial(false))}
        />
      )}
      
      {/* ÂêçÁß∞ÈáçÂ§çÁ°ÆËÆ§ÂØπËØùÊ°Ü */}
      <AlertDialog open={showNameConfirm} onOpenChange={setShowNameConfirm}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Ê¨¢ËøéÂõûÊù• {existingPlayerData?.playerName}</AlertDialogTitle>
            <AlertDialogDescription>
              {existingPlayerData && (
                `ÂèëÁé∞Êú¨Âú∞ËÆ∞ÂΩïÔºå${existingPlayerData.playerName}Ôºà${existingPlayerData.totalScore}ÂàÜÔºâÔºåÊòØÂê¶ÁªßÁª≠Ê∏∏ÊàèÔºü`
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => {
              setShowNameConfirm(false);
              setShowNameInput(true);
            }}>
              ÈáçÊñ∞ËæìÂÖ•
            </AlertDialogCancel>
            <AlertDialogAction onClick={handleNameConfirmOverwrite}>
              ÁªßÁª≠‰ΩøÁî®
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Ê∏©È¶®ÊèêÁ§∫ÂØπËØùÊ°Ü */}
      <AlertDialog open={showWelcomeMessage} onOpenChange={setShowWelcomeMessage}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Ê¨¢ËøéÂä†ÂÖ•Ê∏∏Êàè</AlertDialogTitle>
            <AlertDialogDescription>
              <div className="space-y-3">
                <div>
                  ËØ∑ËÆ∞‰ΩèËøô‰∏™ÂêçÂ≠óÔºö<span className="font-semibold text-blue-600">{welcomePlayerName}</span>
                </div>
                <div className="text-sm text-gray-600">
                  Âú®ËøôÂè∞ËÆæÂ§áÔºàID: <span className="font-mono text-xs">{getDeviceId()}</span>Ôºâ
                </div>
                <div className="text-sm font-bold text-white">
                  ÊÇ®ÁöÑÂêçÂ≠óÂ∞Ü‰∏éÊÇ®ÁöÑÁßØÂàÜÁ≥ªÁªüÁªëÂÆö„ÄÇ‰ª•Áõ∏ÂêåÂêçÂ≠óËøõÂÖ•Ê∏∏Êàè‰ºö‰øùÁïôÁßØÂàÜ„ÄÇ
                </div>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={handleWelcomeReInput}>
              ÈáçÊñ∞ËæìÂÖ•
            </AlertDialogCancel>
            <AlertDialogAction onClick={handleWelcomeConfirm}>
              È©¨‰∏äÂºÄÂßã
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* ÊàòÊñóÈ£éÊ†ºÈÄâÊã©ÂØπËØùÊ°Ü */}
      <AlertDialog open={showBattleStyleSelect} onOpenChange={setShowBattleStyleSelect}>
        <AlertDialogContent className="max-w-4xl max-h-[90vh] flex flex-col">
          <AlertDialogHeader className="flex-shrink-0">
            <AlertDialogTitle className="text-center text-2xl">ÈÄâÊã©ÊàòÊñóÈ£éÊ†º</AlertDialogTitle>
            <AlertDialogDescription className="text-center">
              ‰∏çÂêåÊàòÊñóÂàÜÊï∞‰ΩìÁ≥ª‰ºöÊúâ‰∏çÂêåÁöÑÊ∏∏Êàè‰ΩìÈ™å
            </AlertDialogDescription>
          </AlertDialogHeader>
          
          <div className="flex-1 overflow-y-auto p-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Âø´ÊÑèÊÅ©‰ªá */}
              <div 
                className="border-2 border-red-500/50 bg-red-900/20 rounded-lg p-6 cursor-pointer hover:border-red-400 hover:bg-red-900/30 transition-all duration-300"
                onClick={() => handleBattleStyleSelect("quick")}
              >
                <div className="flex items-center justify-center mb-4">
                  <div className="w-16 h-16 bg-red-600 rounded-full flex items-center justify-center">
                    <Sword className="w-8 h-8 text-white" />
                  </div>
                </div>
                <h3 className="text-xl font-bold text-red-400 text-center mb-3">Âø´ÊÑèÊÅ©‰ªá</h3>
                <div className="text-gray-300 text-center mb-4">
                  <p className="text-lg font-semibold mb-2">ÊâÄÊúâÁé©ÂÆ∂ÂàùÂßãÊàòÊñóÂàÜ50ÂàÜ</p>
                  <p className="text-sm">Á¥ØËÆ°Êâ£‰ΩèÂØπÊâã5Âº†ÊâãÁâåÁªìÊùüÊàòÊñó</p>
                </div>
                <div className="text-orange-300 text-sm bg-orange-900/20 p-3 rounded">
                  <strong>ÁâπÁÇπÔºö</strong>È£éÊµ™Ë∂äÂ§ßÈ±ºË∂äË¥µÔºåÊõ¥ÂÆπÊòìËé∑ËÉú‰πüÂÆπÊòì‰∏¢ÂàÜ
                </div>
              </div>

              {/* ËøêÁ≠πÂ∏∑ÂπÑ */}
              <div 
                className="border-2 border-blue-500/50 bg-blue-900/20 rounded-lg p-6 cursor-pointer hover:border-blue-400 hover:bg-blue-900/30 transition-all duration-300"
                onClick={() => handleBattleStyleSelect("strategic")}
              >
                <div className="flex items-center justify-center mb-4">
                  <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center">
                    <Fan className="w-8 h-8 text-white" />
                  </div>
                </div>
                <h3 className="text-xl font-bold text-blue-400 text-center mb-3">ËøêÁ≠πÂ∏∑ÂπÑ</h3>
                <div className="text-gray-300 text-center mb-4">
                  <p className="text-lg font-semibold mb-2">ÊâÄÊúâÁé©ÂÆ∂ÂàùÂßãÊàòÊñóÂàÜ150ÂàÜ</p>
                  <p className="text-sm">Á¥ØËÆ°Êâ£‰ΩèÂØπÊâã15Âº†ÊâãÁâåÁªìÊùüÊàòÊñó</p>
                </div>
                <div className="text-green-300 text-sm bg-green-900/20 p-3 rounded">
                  <strong>ÁâπÁÇπÔºö</strong>‰ºöÊúâÂ§ö‰∏™ÂõûÂêàÁöÑÂõûÊóã‰ΩôÂú∞ÔºåÁî®Â•ΩÁ≠ñÁï•ÂèØ‰ª•ÂÆûÁé∞ÁªùÂú∞ÂèçÊùÄ
                </div>
              </div>
            </div>
          </div>


        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}

function Router() {
  return (
    <Switch>
      <Route path="/" component={HomePage} />
      <Route path="/local" component={() => <LocalGame playerName="Áé©ÂÆ∂" onBackToHome={() => window.location.href = '/'} />} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  // Ê∏∏ÊàèÂÆåÂÖ®Á¶ªÁ∫øËøêË°åÔºåÊó†ÈúÄÁΩëÁªúÂÆ¢Êà∑Á´Ø

  return (
    <TooltipProvider>
      <Toaster />
      <Router />
    </TooltipProvider>
  );
}

export default App;
